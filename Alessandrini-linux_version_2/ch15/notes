Somme indications for the execution of chapter 15 examples
**********************************************************

This chapter deals with several different versions of two codes
based on the pipeline parallel pattern: HEAT (heat diffusion, pipelining
a 2D FFT) and SOR (using the pipeline pattern to handle the data dependency
of the SOR code in chapter 14). All codes are portable, and run on any "vath" 
implementation. The different code versions are summarized below

The HEAT code involves a simple two stage pipeline (pipelining a 2D FFT as
two successive 1D FFTs). This code is used to explore in detail different
choices for synchronizing the two stages.

The SOR code is the same as the one studied in chapter 14. Several successive
pipeline stages are used to handle the data dependencies. Different versions
of this code explore the usage of the different high level pipeline classes
defined in the "vath" library, as well as the TBB pipeline class.

A - HEAT
********
-) Heat.C      (make heat) Sequential version
-) HeatThB.C   (make heathb) Pipelined parallel version, using the SPool pool
               and a Boolean lock for synchronization.
-) HeatThQ.C   (make heathq) Pipelined parallel version, using the SPool pool
               and a TBB queue for synchronization.
-) HeatOmpB.C  (make heatompb) Pipelined parallel version, using OpenMP and a 
                Boolean lock for synchronization.
-) HeatOmpQ.C  (make heatompq) Pipelined parallel version, using OpenMP and a 
                TBB queue for synchronization.
-) HeatTBB.C   (make heatbb) Pipelined parallel version, using TBB threads
               and the TBB pipeline class


B - SOR
*******
-) Sor.C       (make sor) Sequential version
-) SorThBL.C   (make sth_bl) Pipelined parallel version, using the SPool pool
               and the PipeBL<T> class with T=BLock.
-) SorThSBL.C  (make sth_bl) Pipelined parallel version, using the SPool pool
               and the PipeBL<T> class with T=SpBLock.
-) SorThQ.C    (make sth_q) Pipelined parallel version, using the SPool pool
               and the PipeThQ<T> class with T=integer
-) SorOmpBL.C  (make somp_bl) Pipelined parallel version, using OpenMP and  
               the PipeBL<T> class with T=BLock.
-) SorOmpSBL.C (make somp_sbl) Pipelined parallel version, using OpenMP and  
               the PipeBL<T> class with T=SpBLock.
-) SorOmpQ.C   (make somp_q) Pipelined parallel version, using OpenMP and  
               the PipeThQ<T> class with T=integer
-) SorTBB.C    (make sortbb) Pipelined parallel version, using TBB threads
               and the TBB pipeline class

C - Compiling and executing
***************************

To compile all OpenMP examples    :  make allomp
To run all OpenMP examples        :  make runomp

To compile all book examples (except OpenMP)      :  make all
To run all book examples (except OpenMP)          :  make runall

