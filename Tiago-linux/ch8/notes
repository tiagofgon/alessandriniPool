Somme indications for the execution of the examples in chapter 8
----------------------------------------------------------------

This chapter deals with atomic services. There are NO atomic services
in Pthreads. Therefore, in the Linux environment, we have two possible
options:

1) The std::atomic<T> class in the C++11 library. This requires linking
   the example codes with the C++11 implementation of "vath" (setting the
   CPP11_ENV environment variable)

2) The portable TBB tbb::atomic<T> class. When using the TBB atomic services
   as a standalone utility, the example codes can be linked with ANY "vath"
   implementation. Therefore, TBB atomic is a good option when using the
   Pthreads implementation of "vath". Remember to configure TBB by running
   the tbbvars.sh script


Here are the three basic subjects developed, and the relevant examples:

***************************************************************
A - Using atomics to replace mutex locking of simple data items
***************************************************************

McAtomic_S.C:  MonteCarlo computation of PI. This is a simple example, 
============   in which a global std::atomic counter is used to accumulate 
               MonteCarlo acceptances. There is on purpose excessive mutual 
               exclusion, because the counter is increased every time there 
               is a new accepted event. But the performances are quite 
               acceptable.
               To compile: make atest


****************************************************************
B - Using atomics to implement custom synchronization constructs
****************************************************************

Chapter 8 proposes two subjects:
 
 a) Implementing a spin mutex. Remember: a native spin mutex exists in
    Pthreads, but not in C++11 or Windows. This is the SpinLock.h class,
    a portable class that simply encapsulates the native spin mutex in
    Pthreads, and is a custom class using the std::atomic services in C++11
    This class is in turn used to implement the SpBLock.h class (a Boolean 
    Lock doing a spin wait instead of an idle wait)

 b) Implementing a thread safe ring buffer: the RingBuffer.h class. This
    class is also portable. In Pthreads, it uses standard (mutex+condition
    variables) synchronization techniques. In C++11, it uses custom
    std::atomic<T> synchronizations

 c) There is also a RBuff_TBB.h class, same as the previous one, using
    the TBB tbb::atomic<T> class. Again, it is portable, and can be used
    in Pthreads or C++11 environments. A good choice to benefit from
    atomic services in Pthreads.

The related examples are:

TSpinLock.C: testing the SpinLock class in a context with important mutual
===========  exclusion contention: performing a database search. This
             example implements the same logic as DbSearch.C in chapter 3,
             but uses explicit synchronization based on the spin mutex service.
             To compile: make tsplock

TRBuff.C: Testing the RingBuffer class for integers. A producer thread
========  inserts consecutive integer values, and a consumer reads and prints 
          them. The buffer size is a template parameter.
          To compile: make trbuff

TRBuff_T.C: Testing the TBB RBuff_Tbb class for integers. A producer thread
==========  inserts consecutive integer values, and a consumer reads and prints 
            them. The buffer size is a template parameter.
            To compile: make trbuff_t


***************************************************
C - Using atomics to implement lock free algorithms
***************************************************

Chapter 8 proposes the AReduction.h class, an improved version of the 
Reduction.h class: instead of mutex locking, a lock free algorithm is used
for the thread safe accumulation of values of a generic type T (the template
parameter of the class) 

AReduction is based on std::atomic<T> class, and its is not portable: its
usage is restricted to a C++11 environment. There is also the TReduction.h
class, which does the same thing using the tbb.atomic<T> class. This class
can be used in any environment.

The related examples are:

ScaProd_S.C: Testing the AReduction class in a scalar product computation. 
===========  In this example there is excessive mutual exclusion contention,
             to compare the performance of lock free algorithms with ordinary
             mutex locking. This code requires CPP11_STD
             To compile: make scaproda

ScaProd_T.C: Testing the TbbReduction class in a scalar product computation. 
===========  In this example there is excessive mutual exclusion contention,
             to compare the performance of lock free algorithms with ordinary
             mutex locking.
             To compile: make scaprodt


To compile all SPool codes:     make allsp
To run all SPool codes:         make runspool 

To compile all C++11 codes   :  set CPP11_ENV ; make allstd
To run ann C++11 codes       :  make runstd






==================================================
Clarifyng the status of atomic facilities in vath:
==================================================

Here are the atomic facilities incorporated in the c++11 implementation
of the "vath" library:

AReduction.h : template class, reduction operation on any type T
               using lock-free algorithm based on std::atomic<T*>

RingBuffer.h : template class, thread safe circular buffer for arbitrary
               type T, using internally std::atomic<int>. Refined 
               synchronizations, using relaxed and acquire-release
               memory models.

RingBufferSC.h:  same as before, but using stronger sequential consistency
                 memory model because GNU 4.8.3 compiler implementation will 
                 not take the weaker memory models. GNU 4.9.2 and higher is OK

SpMutex.h   : spin mutex, using std::atomic.

SpBlock.h   : spinning boolean lock (spin wait) using std::atomic.

SpBarrier.h : barrier implemented with spin waits, using SpMutex


Other atomic utilities in ch8/include:
-------------------------------------
AReductionT.h : .Like AReduction.h, but uses TBB tbb::atomic<T*> class.

                 





